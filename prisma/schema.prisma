// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String? @unique
  username String  @unique

  firstName       String?
  lastName        String?
  transactions    Transaction[]
  Fund            Fund[]
  FundTransaction FundTransaction[]
  Account Account[]

  @@unique([email, username])
  @@map("users")
}

model Currency {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  short       String @unique
  icon        String @unique
  description String?

  Currency          CurrencyExchange[]  @relation("Currency")
  CurrencyToConvert CurrencyExchange[]  @relation("CurrencyToConvert")
  Transaction     Transaction[]
  FundTransaction FundTransaction[]
  Account Account[]

  @@unique([short, icon])
  @@map("currency")
}

model CurrencyExchange {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  currencyId          Int
  currencyToConvertId Int
  currency            Currency @relation(fields: [currencyId], references: [id], name: "Currency")
  currencyToConvert   Currency @relation(fields: [currencyToConvertId], references: [id], name: "CurrencyToConvert")
  value_buy         Float
  value_sell        Float

  @@map("currency-exchanges")
}

model Transaction {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  value       Float
  usd_value   Float
  description String?

  currencyId Int
  currency   Currency @relation(fields: [currencyId], references: [id])

  accountId Int
  account   Account @relation(fields: [accountId], references: [id])

  status String // pending, scheduled, rejected, complete
  type   String // income expense

  userId Int
  user   User @relation(fields: [userId], references: [id])

  @@map("transactions")
}

model Fund {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String?

  isDeleted Boolean?

  userId Int
  user   User @relation(fields: [userId], references: [id])

  @@map("fund")
}

model FundTransaction {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  value       Float
  usd_value   Float
  description String?

  currencyId Int
  currency   Currency @relation(fields: [currencyId], references: [id])

  status String // pending, scheduled, rejected, complete
  type   String // income expense toFund

  userId Int
  user   User @relation(fields: [userId], references: [id])

  @@map("fund-transactions")
}

model Account {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String?
  address String
  provider String?
  network String?

  legalEntity String

  currencyId Int
  currency   Currency @relation(fields: [currencyId], references: [id])

  transactions Transaction[]

  type   String // IBAN, crypto, physical,

  userId Int
  user   User @relation(fields: [userId], references: [id])
  @@map("account")
}

